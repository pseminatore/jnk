package jnk;

import robocode.*;
import robocode.util.Utils;
import java.awt.geom.*;
import java.util.ArrayList;
import java.awt.Color;
import java.awt.Graphics2D;

/**
 * SuperButt - a robot by (Jack Kimball and Patrick and sometimes Connor)
 */
public class SuperButt extends AdvancedRobot {
	public int ourShots=0;
	public int ourHits=0;
	public float ourAccuracy=0;
	
    public static int BINS = 47;
    public final static int BUCKETS = 31;
    public static double _surfStats[] = new double[BINS];
    public Point2D.Double _myLocation;
    public Point2D.Double _enemyLocation;

    public ArrayList _enemyWaves;
    public ArrayList _surfDirections;
    public ArrayList _surfAbsBearings;

    ArrayList<Wave> Waves = new ArrayList<Wave>();
    int[][] buckets = new int[13][31];
    int radarDirection = 1;

    public static double _oppEnergy = 100.0;
    public boolean isGuessFactor = false;

    // rectangle representing an 800x600 battlefield used for wall smoothing.
    public static Rectangle2D.Double _fieldRect = new java.awt.geom.Rectangle2D.Double(18, 18, 764, 564);
    public static double WALL_STICK = 160;

    /**
     * run: Surfer's default behavior
     */
    public void run() {
        setColors(Color.white, Color.white, Color.black); // body,gun,radar

        _enemyWaves = new ArrayList<EnemyWave>();
        _surfDirections = new ArrayList<Integer>();
        _surfAbsBearings = new ArrayList<Double>();

        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);

        do {
            turnRadarRightRadians(Double.POSITIVE_INFINITY);
        } while (true);
    }

    /**
     * onScannedRobot: What to do when you see another robot
     */
    public void onScannedRobot(ScannedRobotEvent e) {
        _myLocation = new Point2D.Double(getX(), getY());
        double lateralVelocity = getVelocity() * Math.sin(e.getBearingRadians());
        double absBearing = e.getBearingRadians() + getHeadingRadians();
        _surfDirections.add(0, new Integer((lateralVelocity >= 0) ? 1 : -1));
        _surfAbsBearings.add(0, new Double(absBearing + Math.PI));

        double bulletPower = _oppEnergy - e.getEnergy();
        if (bulletPower < 3.01 && bulletPower > 0.09 && _surfDirections.size() > 2) {
            EnemyWave ew = new EnemyWave();
            ew.fireTime = getTime() - 1;
            ew.bulletVelocity = bulletVelocity(bulletPower);
            ew.distanceTraveled = bulletVelocity(bulletPower);
            ew.direction = ((Integer) _surfDirections.get(2)).intValue();
            ew.directAngle = ((Double) _surfAbsBearings.get(2)).doubleValue();
            ew.fireLocation = (Point2D.Double) _enemyLocation.clone(); // last tick
            

            _enemyWaves.add(ew);
        }
	float tempEnergy = _oppEnergy;
        _oppEnergy = e.getEnergy();
        if ((tempEnergy - _oppEnergy)>0 && (tempEnergy - _oppEnergy)<3){
        	ourHits++;
	}
	
        // update after EnemyWave detection, because that needs the previous
        // enemy location as the source of the wave
        _enemyLocation = project(_myLocation, absBearing, e.getDistance());

        updateWaves();
        doSurfing();
        if (isGuessFactor){
            guessFactor(e);
            }else{
            double bulletForce = Math.min(400 / e.getDistance(), 3);
    	double headOnBearing = getHeadingRadians() + e.getBearingRadians();
    	double linearBearing = headOnBearing + Math.asin(e.getVelocity() / Rules.getBulletSpeed(bulletForce) * Math.sin(e.getHeadingRadians() - headOnBearing));
    	setTurnGunRightRadians(Utils.normalRelativeAngle(linearBearing - getGunHeadingRadians()));
		if (getGunHeat() == 0) {
			setFire(bulletForce);
			ourShots++;
		}
        }
        ourAccuracy =(float) ourHits / ourShots;
        if (ourAccuracy < 30.0){
        	isGuessFactor = false;
        }
    }

    public void updateWaves() {
        for (int x = 0; x < _enemyWaves.size(); x++) {
            EnemyWave ew = (EnemyWave) _enemyWaves.get(x);

            ew.distanceTraveled = (getTime() - ew.fireTime) * ew.bulletVelocity;
            if (ew.distanceTraveled > _myLocation.distance(ew.fireLocation) + 50) {
                _enemyWaves.remove(x);
                x--;
            }
        }
    }

    public void guessFactor(ScannedRobotEvent e) {

        double lateralVelocity = getVelocity() * Math.sin(e.getBearingRadians());
        double absBearing = e.getBearingRadians() + getHeadingRadians();

        setTurnRadarRightRadians(Utils.normalRelativeAngle(absBearing - getRadarHeadingRadians()) * 2);

        // Fire with a power level proportional to the enemy's distance. 
        double bulletForce = Math.min(400 / e.getDistance(), 3);
        double linearBearing = absBearing + Math.asin(e.getVelocity() / Rules.getBulletSpeed(bulletForce) * Math.sin(e.getHeadingRadians() - absBearing));

        //guess factor targeting 
        double enemyX = getX() + Math.sin(absBearing) * e.getDistance();
        double enemyY = getY() + Math.cos(absBearing) * e.getDistance();
        for (int i = 0; i < Waves.size(); i++) {
            Wave currentWave = (Wave) Waves.get(i);
            if (currentWave.hit(enemyX, enemyY, getTime())) {
                Waves.remove(currentWave);
                i--;
            }
        }
        if (e.getVelocity() != 0) {
            if ((Math.sin(e.getHeadingRadians() - absBearing * e.getVelocity())) < 0) {
                radarDirection = -1;
            } else {
                radarDirection = 1;
            }
        }
        int[] currentStats = buckets[(int) (e.getDistance() / 100)];
        //create a new wave object 
        Wave newWave = new Wave(getX(), getY(), bulletForce, absBearing, radarDirection, getTime(), currentStats);
        //best guess will always start out at (BUCKETS-1)/2, or a guess factor of 0, or straight ahead (synonyms) 
        int bestGuess = 15;
        //stepping through and finding the best index in the array 
        for (int i = 0; i < BUCKETS; i++) {
            if (currentStats[bestGuess] < currentStats[i]) {
                bestGuess = i;
            }
        }
        //undoing the math done in the Wave object to "unpackage" the guess factor 
        double guessFactor = (double) (bestGuess - (currentStats.length - 1) / 2) / ((currentStats.length - 1) / 2);
        double angleOffset = radarDirection * guessFactor * newWave.maxEscapeAngle();
        double gunAdjust = (Utils.normalRelativeAngle(absBearing - getGunHeadingRadians() + angleOffset));
 		//set the gun to the newly calculated angle 
        //setTurnGunRightRadians(gunAdjust); 
        //only fireif the gun is able to 
        //Also add the new wave to the data 
        if (getGunHeat() == 0) {
            if (setFireBullet(bulletForce) != null && e.getVelocity() != 0) {
                setTurnGunRightRadians(gunAdjust);
                setFireBullet(bulletForce);
                Waves.add(newWave);
                ourShots++;
            } else if (e.getVelocity() == 0) {
                setTurnGunRightRadians(Utils.normalRelativeAngle(linearBearing - getGunHeadingRadians()));
                setFire(bulletForce);
                ourShots++;
                //Waves.add(newWave); 
            }
        }
    }

    public EnemyWave getClosestSurfableWave() {
        double closestDistance = 50000; // just use some very big number here. It doesn't matter.
        EnemyWave surfWave = null;

        for (int x = 0; x < _enemyWaves.size(); x++) {
            EnemyWave ew = (EnemyWave) _enemyWaves.get(x);
            double distance = _myLocation.distance(ew.fireLocation) - ew.distanceTraveled;

            if (distance > ew.bulletVelocity && distance < closestDistance) {
                surfWave = ew;
                closestDistance = distance;
            }
        }

        return surfWave;
    }

    // Given the EnemyWave that the bullet was on, and the point where we
    // were hit, calculate the index into our stat array for that factor.
    public static int getFactorIndex(EnemyWave ew, Point2D.Double targetLocation) {
        double offsetAngle = (absoluteBearing(ew.fireLocation, targetLocation) - ew.directAngle);
        double factor = Utils.normalRelativeAngle(offsetAngle) / maxEscapeAngle(ew.bulletVelocity) * ew.direction;

        return (int) limit(0,
                (factor * ((BINS - 1) / 2)) + ((BINS - 1) / 2), BINS - 1);
    }

    // Given the EnemyWave that the bullet was on, and the point where we
    // were hit, update our stat array to reflect the danger in that area.
    public void logHit(EnemyWave ew, Point2D.Double targetLocation) {
        int index = getFactorIndex(ew, targetLocation);

        for (int x = 0; x < BINS; x++) {
            // for the spot bin that we were hit on, add 1;
            // for the bins next to it, add 1 / 2;
            // the next one, add 1 / 5; and so on...
            _surfStats[x] += 1.0 / (Math.pow(index - x, 2) + 1);
        }
    }

    /**
     * onHitByBullet: What to do when you're hit by a bullet
     */
    public void onHitByBullet(HitByBulletEvent e) {
        // If the _enemyWaves collection is empty, we must have missed the
        // detection of this wave somehow.
        if (!_enemyWaves.isEmpty()) {
            Point2D.Double hitBulletLocation = new Point2D.Double(e.getBullet().getX(), e.getBullet().getY());
            EnemyWave hitWave = null;

            // look through the EnemyWaves, and find one that could've hit us.
            for (int x = 0; x < _enemyWaves.size(); x++) {
                EnemyWave ew = (EnemyWave) _enemyWaves.get(x);

                if (Math.abs(ew.distanceTraveled - _myLocation.distance(ew.fireLocation)) < 50 && Math.abs(bulletVelocity(e.getBullet().getPower()) - ew.bulletVelocity) < 0.001) {
                    hitWave = ew;
                    break;
                }
            }

            if (hitWave != null) {
                logHit(hitWave, hitBulletLocation);

                // We can remove this wave now, of course.
                _enemyWaves.remove(_enemyWaves.lastIndexOf(hitWave));
            }
        }
    }

    public Point2D.Double predictPosition(EnemyWave surfWave, int direction) {
        Point2D.Double predictedPosition = (Point2D.Double) _myLocation.clone();
        double predictedVelocity = getVelocity();
        double predictedHeading = getHeadingRadians();
        double maxTurning, moveAngle, moveDir;

        int counter = 0; // number of ticks in the future
        boolean intercepted = false;

        do {    // the rest of these code comments are rozu's
            moveAngle = wallSmoothing(predictedPosition, absoluteBearing(surfWave.fireLocation, predictedPosition) + (direction * (Math.PI / 2)), direction) - predictedHeading;
            moveDir = 1;

            if (Math.cos(moveAngle) < 0) {
                moveAngle += Math.PI;
                moveDir = -1;
            }

            moveAngle = Utils.normalRelativeAngle(moveAngle);

            // maxTurning is built in like this, you can't turn more then this in one tick
            maxTurning = Math.PI / 720d * (40d - 3d * Math.abs(predictedVelocity));
            predictedHeading = Utils.normalRelativeAngle(predictedHeading + limit(-maxTurning, moveAngle, maxTurning));

            // this one is nice ;). if predictedVelocity and moveDir have
            // different signs you want to breack down
            // otherwise you want to accelerate (look at the factor "2")
            predictedVelocity += (predictedVelocity * moveDir < 0 ? 2 * moveDir : moveDir);
            predictedVelocity = limit(-8, predictedVelocity, 8);

            // calculate the new predicted position
            predictedPosition = project(predictedPosition, predictedHeading, predictedVelocity);

            counter++;

            if (predictedPosition.distance(surfWave.fireLocation) < surfWave.distanceTraveled + (counter * surfWave.bulletVelocity) + surfWave.bulletVelocity) {
                intercepted = true;
            }
        } while (!intercepted && counter < 500);

        return predictedPosition;
    }

    public double checkDanger(EnemyWave surfWave, int direction) {
        int index = getFactorIndex(surfWave, predictPosition(surfWave, direction));
        return _surfStats[index];
    }

    public void doSurfing() {
        EnemyWave surfWave = getClosestSurfableWave();

        if (surfWave == null) {
            return;
        }

        double dangerLeft = checkDanger(surfWave, -1);
        double dangerRight = checkDanger(surfWave, 1);

        double goAngle = absoluteBearing(surfWave.fireLocation, _myLocation);
        if (dangerLeft < dangerRight) {
            goAngle = wallSmoothing(_myLocation, goAngle - (Math.PI / 2), -1);
        } else {
            goAngle = wallSmoothing(_myLocation, goAngle + (Math.PI / 2), 1);
        }

        setBackAsFront(this, goAngle);
    }

    /**
     * onHitWall: What to do when you hit a wall
     */
    public void onHitWall(HitWallEvent e) {
        // Replace the next line with any behavior you would like
        back(20);
    }

    public double wallSmoothing(Point2D.Double botLocation, double angle, int orientation) {
        while (!_fieldRect.contains(project(botLocation, angle, WALL_STICK))) {
            angle += orientation * 0.05;
        }
        return angle;
    }

    public static Point2D.Double project(Point2D.Double sourceLocation, double angle, double length) {
        return new Point2D.Double(sourceLocation.x + Math.sin(angle) * length, sourceLocation.y + Math.cos(angle) * length);
    }

    public static double absoluteBearing(Point2D.Double source, Point2D.Double target) {
        return Math.atan2(target.x - source.x, target.y - source.y);
    }

    public static double limit(double min, double value, double max) {
        return Math.max(min, Math.min(value, max));
    }

    public static double bulletVelocity(double power) {
        return (20.0 - (3.0 * power));
    }

    public static double maxEscapeAngle(double velocity) {
        return Math.asin(8.0 / velocity);
    }

    public static void setBackAsFront(AdvancedRobot robot, double goAngle) {
        double angle = Utils.normalRelativeAngle(goAngle - robot.getHeadingRadians());
        if (Math.abs(angle) > (Math.PI / 2)) {
            if (angle < 0) {
                robot.setTurnRightRadians(Math.PI + angle);
            } else {
                robot.setTurnLeftRadians(Math.PI - angle);
            }
            robot.setBack(100);
        } else {
            if (angle < 0) {
                robot.setTurnLeftRadians(-1 * angle);
            } else {
                robot.setTurnRightRadians(angle);
            }
            robot.setAhead(100);
        }
    }

    // Calculates maximum escape angle of the enemy's linear path 
    public double maximumEscapeAngle(ScannedRobotEvent e) {
        double bulletPower = Math.min(400 / e.getDistance(), 3);
        double maximumEscapeAngle = Math.asin(8 / bulletVelocity(bulletPower));
        return maximumEscapeAngle;
    }

    public void onPaint(Graphics2D g) {
        // Set the paint color to red 
        g.setColor(new Color(0xff, 0x00, 0x00, 0x80));
        for (Wave w : Waves) {
            w.draw(g, getTime());
        }
        System.out.println("Waves: " + Waves.size());
    }

    class Wave {

        private double startX;
        private double startY;
        private double power;
        private double bearing;
        private int direction;
        private double timeOfFire;
        private int[] returnChunk;

        //set up new wave 
        public Wave(double startX, double startY, double power, double bearing, int direction, double timeOfFire, int[] chunk) {
            this.startX = startX;
            this.startY = startY;
            this.bearing = bearing;
            this.power = power;
            this.direction = direction;
            this.timeOfFire = timeOfFire;
            this.returnChunk = chunk;
        }

        public double getBulletSpeed() {
            return 20 - power * 3;
        }

        public double maxEscapeAngle() {
            return Math.asin(8.0 / getBulletSpeed());
        }

        public boolean hit(double oppX, double oppY, double timeOfHit) {
	 		//the wave will have hit the other robot when the radius of the wave exceeds or is equal to the  
            //distance from the starting coordinates to the enemy robot 
            //					velocity*time=distance 
            if (Point2D.distance(startX, startY, oppX, oppY) <= ((timeOfHit - timeOfFire) * getBulletSpeed())) {
                float correctAngle = (float) Math.atan2(oppX - startX, oppY - startY);
                float angleOffset = (float) (correctAngle - bearing);
                float guessFactor = (float) Math.max((float) -1.0, Math.min(1, angleOffset / maxEscapeAngle())) * direction;
                int index = (int) Math.round((returnChunk.length - 1) / 2 * (guessFactor + 1));
                returnChunk[index]++;
                return true;
            }
            return false;
        }

        public void draw(Graphics2D g, long time) {
            int r = (int) ((time - timeOfFire) * getBulletSpeed());
            int x = (int) startX - r;
            int y = (int) startY - r;
            g.drawOval(x, y, 2 * r, 2 * r);
            g.drawLine((int) startX, (int) startY, (int) (startX + r * Math.sin(bearing)), (int) (startY + r * Math.cos(bearing)));
        }
    }

    class EnemyWave {

        Point2D.Double fireLocation;
        long fireTime;
        double bulletVelocity, directAngle, distanceTraveled;
        int direction;

        public EnemyWave() {
        }
    }
}
